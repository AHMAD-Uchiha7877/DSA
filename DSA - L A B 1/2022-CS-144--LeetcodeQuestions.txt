///////////////////////////////////////leetcodeQ1//////////////////////////////////////////////////////////////////
vector<int> smallerNumbersThanCurrent(vector<int> &nums) {
    int size = nums.size();
    vector<int> result(size);

    for (int i = 0; i < size; i++) {
        int count = 0;

        for (int j = 0; j < size; j++) {
            if (i != j && nums[j] < nums[i]) {
                count++;
            }
        }

        result[i] = count;
    }

    return result;
}

//////////////////////////////leetcodeQ2//////////////////////////////////////////////////////////////////////////////


int removeElement(vector<int> &nums, int val)
{
    int count = 0;
    for (int i = 0; i < nums.size(); i++)
    {
        if (nums[i] != val)
        {
            nums[count] = nums[i];
            count++;
        }
    }
    return count;
}

//////////////////////////////leetcodeQ3//////////////////////////////////////////////////////////////////////////////


    bool Search(vector<vector<int>> &matrix, int target)
    {
        int m = matrix.size();
     
        int n = matrix[0].size();
        int low = 0;
        int high = m * n - 1;

        while (low <= high)
        {
            int mid = low + (high - low) / 2;
            int row = mid / n;
            int col = mid % n;
            if (matrix[row][col] == target)
            {
                return true;
            }
            else if (matrix[row][col] < target)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }

        return false;
    }

//////////////////////////////leetcodeQ4//////////////////////////////////////////////////////////////////////////////

int removeDuplicates(vector<int> &nums)
{
    

    int count = 1; 
    int n = nums.size();

    for (int i = 1; i < n; i++)
    {
        if (nums[i] != nums[i - 1])
        {
            nums[count] = nums[i]; 
            count++;               
        }
    }

    return count;
}

//////////////////////////////leetcodeQ5//////////////////////////////////////////////////////////////////////////////

int maxSubArray(vector<int> &nums)
{
    int max_sum = nums[0];
    int current_sum = nums[0];

    for (int i = 1; i < nums.size(); i++)
    {
        current_sum = max(nums[i], current_sum + nums[i]);
        max_sum = max(max_sum, current_sum);
    }

    return max_sum;
}

//////////////////////////////leetcodeQ6//////////////////////////////////////////////////////////////////////////////

int firstBadVersion(int n)
{
    int low = 1;
    int high = n;

    while (low < high)
    {
        int mid = low + (high - low) / 2;

        if (isBadVersion(mid))
        {
            high = mid;
        }
        else
        {
            low = mid + 1;
        }
    }

    return low;
}

//////////////////////////////leetcodeQ7//////////////////////////////////////////////////////////////////////////////



int firstcountPositive(vector<int> &nums)
{
    int n = nums.size();

    sort(nums.begin(), nums.end());

    int count = 1;
    for (int i = 0; i < n; i++)
    {
        if (nums[i] == count)
        {

            count++;
        }
        else if (nums[i] > count)
        {

            return count;
        }
    }

    return count;
}
